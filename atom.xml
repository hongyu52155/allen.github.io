<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>七月与安生</title>
  
  <subtitle>摄影爱好者、吉他小白、程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https:allenYuKin.github.io/"/>
  <updated>2017-12-06T09:33:45.000Z</updated>
  <id>https:allenYuKin.github.io/</id>
  
  <author>
    <name>七月与安生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>me</title>
    <link href="https:allenYuKin.github.io/2017/12/06/me/"/>
    <id>https:allenYuKin.github.io/2017/12/06/me/</id>
    <published>2017-12-06T09:30:04.000Z</published>
    <updated>2017-12-06T09:33:45.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个吊儿郎当的小伙子。</p></blockquote><p><img src="http://oji6h5o73.bkt.clouddn.com/red02.jpg" alt=""><br><a id="more"></a></p><p><img src="http://oji6h5o73.bkt.clouddn.com/red03.jpg" alt=""></p><p><img src="http://oji6h5o73.bkt.clouddn.com/red04.jpg" alt=""></p><p><img src="http://oji6h5o73.bkt.clouddn.com/red06.jpg" alt=""></p><p><img src="http://oji6h5o73.bkt.clouddn.com/red08.jpg" alt=""></p><p><img src="http://oji6h5o73.bkt.clouddn.com/red09.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个吊儿郎当的小伙子。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://oji6h5o73.bkt.clouddn.com/red02.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="摄影" scheme="https:allenYuKin.github.io/categories/%E6%91%84%E5%BD%B1/"/>
    
    
      <category term="photo" scheme="https:allenYuKin.github.io/tags/photo/"/>
    
  </entry>
  
  <entry>
    <title>街拍闲逛</title>
    <link href="https:allenYuKin.github.io/2017/12/06/%E9%97%B2%E9%80%9B/"/>
    <id>https:allenYuKin.github.io/2017/12/06/闲逛/</id>
    <published>2017-12-06T09:24:04.000Z</published>
    <updated>2017-12-06T09:33:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上海天山soho一角。</p></blockquote><p><img src="http://oji6h5o73.bkt.clouddn.com/red10.jpg" alt=""></p><a id="more"></a><p><img src="http://oji6h5o73.bkt.clouddn.com/red11.jpg" alt=""></p><blockquote><p>南京东路苹果直营店logo。</p></blockquote><p><img src="http://oji6h5o73.bkt.clouddn.com/red07.jpg" alt=""></p><blockquote><p>夜晚的灯光。</p></blockquote><p><img src="http://oji6h5o73.bkt.clouddn.com/red05.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;上海天山soho一角。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://oji6h5o73.bkt.clouddn.com/red10.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="摄影" scheme="https:allenYuKin.github.io/categories/%E6%91%84%E5%BD%B1/"/>
    
    
      <category term="photo" scheme="https:allenYuKin.github.io/tags/photo/"/>
    
  </entry>
  
  <entry>
    <title>基础架构 MVC &amp; MVVM</title>
    <link href="https:allenYuKin.github.io/2017/12/06/iOS%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/"/>
    <id>https:allenYuKin.github.io/2017/12/06/iOS开发文档/</id>
    <published>2017-12-06T04:24:04.000Z</published>
    <updated>2017-12-06T09:01:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录分级建议"><a href="#目录分级建议" class="headerlink" title="目录分级建议"></a>目录分级建议</h3><p> <img src="http://oji6h5o73.bkt.clouddn.com/1975281-3dbde6249c5262f5.jpg" alt="" title="MVC架构设计模式"></p><ul><li><p><strong>Class层级下按TabBar模块进行分类(例如Base基类、工具类Tools、开源库等等)</strong></p></li><li><p><strong>每个TabBar模块下属子模块进行分类(例如HMModuleOne、HMModuleTwo等等)，子模块按照MVC，MVVM来做处理。</strong></p><a id="more"></a><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3></li></ul><hr><h4 id="Model-建议"><a href="#Model-建议" class="headerlink" title="Model 建议"></a>Model 建议</h4><ul><li><strong>命名xxxModel 例如(speed wallet) SWTextModel</strong></li><li><strong>可使用YYModel、或基类BaseModel做容错方法。字典数组之间转换</strong></li><li><strong>可在字段后增加注释</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@property (copy, nonatomic) NSString *name; //姓名</div><div class="line">@property (copy, nonatomic) NSString *content; //内容</div></pre></td></tr></table></figure></li></ul><hr><h4 id="Controller-建议"><a href="#Controller-建议" class="headerlink" title="Controller 建议"></a>Controller 建议</h4><ul><li><strong>UIView的创建和组织</strong></li><li><strong>网络请求&amp;数据处理</strong></li><li><strong>属性命名应见名之意、驼峰法命名</strong></li><li><strong>TableView&amp;Collection代理相关</strong></li><li><strong>数据配置cell&amp;view</strong></li><li><strong>行数过大可考虑拆分category</strong></li><li><p><strong>可在.h中增加方法名</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#pragma mark- GET</div><div class="line">+ (void)getActionWithUrl:(NSString *)url</div><div class="line">params:(NSDictionary *)params</div><div class="line">success:(void(^)(id result))result</div><div class="line">filed:(void(^)(NSString *detail, NSError *error))errors;</div></pre></td></tr></table></figure></li><li><p><strong>可在.m中增加方法详细</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">&lt;#Description#&gt;</div><div class="line"></div><div class="line">@param url &lt;#url description#&gt;</div><div class="line">@param size &lt;#size description#&gt;</div><div class="line">@param images &lt;#images description#&gt;</div><div class="line">@param result &lt;#result description#&gt;</div><div class="line">@param errors &lt;#errors description#&gt;</div><div class="line">*/</div><div class="line"></div><div class="line">快捷键 command + option + / 生成注释</div><div class="line"></div><div class="line">#pragma mark- GET</div><div class="line">+ (void)getActionWithUrl:(NSString *)url</div><div class="line">params:(NSDictionary *)params</div><div class="line">success:(void(^)(id result))result</div><div class="line">filed:(void(^)(NSString *detail, NSError *error))errors;</div></pre></td></tr></table></figure></li></ul><hr><h4 id="View-建议"><a href="#View-建议" class="headerlink" title="View 建议"></a>View 建议</h4><ul><li><strong>布局、事件绑定</strong></li><li><strong>使用model进行配置UI</strong></li></ul><hr><h4 id="ViewModel-建议"><a href="#ViewModel-建议" class="headerlink" title="ViewModel 建议"></a>ViewModel 建议</h4><ul><li><strong>VC业务逻辑拆分处理</strong></li><li><strong>数据请求</strong></li></ul><hr><h4 id="内存问题建议"><a href="#内存问题建议" class="headerlink" title="内存问题建议"></a>内存问题建议</h4><ul><li><strong>block 循环引用问题</strong></li><li><strong>NSNotificationCenter &amp; RemoveObserver 匹配</strong></li></ul><hr><h4 id="Git相关使用建议"><a href="#Git相关使用建议" class="headerlink" title="Git相关使用建议"></a>Git相关使用建议</h4><ul><li><strong>master 正式环境分支</strong></li><li><strong>dev 测试环境分支</strong></li><li><strong>dev-zhaoying 团队个人分支</strong></li><li><strong>dev-hongyu 团队个人分支</strong></li><li><strong>后续可建议，团队个人只可push个人分支，由团队负责人codeReView后进行合并等处理</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目录分级建议&quot;&gt;&lt;a href=&quot;#目录分级建议&quot; class=&quot;headerlink&quot; title=&quot;目录分级建议&quot;&gt;&lt;/a&gt;目录分级建议&lt;/h3&gt;&lt;p&gt; &lt;img src=&quot;http://oji6h5o73.bkt.clouddn.com/1975281-3dbde6249c5262f5.jpg&quot; alt=&quot;&quot; title=&quot;MVC架构设计模式&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Class层级下按TabBar模块进行分类(例如Base基类、工具类Tools、开源库等等)&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;每个TabBar模块下属子模块进行分类(例如HMModuleOne、HMModuleTwo等等)，子模块按照MVC，MVVM来做处理。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https:allenYuKin.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="oc" scheme="https:allenYuKin.github.io/tags/oc/"/>
    
  </entry>
  
  <entry>
    <title>iOS属性修饰关键字都有哪些?</title>
    <link href="https:allenYuKin.github.io/2017/12/06/iOS%E5%B1%9E%E6%80%A7%E4%BF%AE%E9%A5%B0%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B/"/>
    <id>https:allenYuKin.github.io/2017/12/06/iOS属性修饰都有哪些/</id>
    <published>2017-12-06T04:24:04.000Z</published>
    <updated>2017-12-06T09:02:57.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>atomic    原子性访问，对属性赋值的时候加锁</li><li>noatomic  非原子性访问，对属性赋值的时候不加锁，多线程并发访问会提高性能</li><li>strong    OC对象-强引用，表示实例变量对传入的对象要有所有权关系</li><li>assige    非OC对象(number,bool)，简单赋值，引用计数不会增加<a id="more"></a></li><li>retain    release旧对象，将旧对象的值赋予输入对象，属于浅拷贝-指针复制</li><li>copy      setter方法进行copy操作,和retain处理流程一样，先旧值release，开辟内存copy对象，属于深拷贝-内容复制</li><li>weak      引用对象的引用计数不会增加，并在对象被释放的时候自动被设置为nil</li><li>readwrite 可读可写，表示该属性同时拥有setter和getter</li><li>readonly  只读属性，表示只有getter没有setter，不希望属性在类外部改变</li><li>nullable  声明的属性可以为空</li><li>nonnull   声明的属性不能为空</li></ul><h4 id="非集合类对象copy和mutableCopy"><a href="#非集合类对象copy和mutableCopy" class="headerlink" title="非集合类对象copy和mutableCopy"></a>非集合类对象copy和mutableCopy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[不可变对象 copy] //浅复制</div><div class="line">[不可变对象 mutableCopy] //深复制</div><div class="line">[可变对象 copy] //深复制</div><div class="line">[可变对象 mutableCopy] //深复制</div><div class="line">copy是不可以被修改的 mutableCopy是可以修改的</div></pre></td></tr></table></figure><h4 id="用-property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？"><a href="#用-property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？" class="headerlink" title="用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？"></a>用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？</h4><ul><li>因为父类指针可以指向子类对象,使用copy的目的是为了让本对象的属性不受外界影响,使用copy无论给我传入是一个可变对象还是不可对象,我本身持有的就是一个不可变的副本</li><li>如果我们使用是strong,那么这个属性就有可能指向一个可变对象,如果这个可变对象在外部被修改了,那么会影响该属性</li></ul><h4 id="代理为什么用weak修饰？"><a href="#代理为什么用weak修饰？" class="headerlink" title="代理为什么用weak修饰？"></a>代理为什么用weak修饰？</h4><ul><li>确保代理执行后，在程序运行的时候不会造成循环引用,对象都会被顺利的销毁,所以会调用代理类的delloc方法</li><li>使用strong修饰，在程序运行的时候会造成循环引用，对象都不会的销毁，从而造成了内存泄露的问题</li></ul><h4 id="block为什么要用copy修饰？"><a href="#block为什么要用copy修饰？" class="headerlink" title="block为什么要用copy修饰？"></a>block为什么要用copy修饰？</h4><ul><li>block的内存地址开辟在栈区，栈区的特点就是创建的对象随时会被销毁掉，一但这个销毁了，再去调用这个对象，就会造成crash，用copy修饰后内存在堆区，不会函数调用完就结束，随对象销毁才销毁</li></ul><h4 id="assign与weak区别"><a href="#assign与weak区别" class="headerlink" title="assign与weak区别"></a>assign与weak区别</h4><p>assign 适用于基本数据类型，weak 适用于 NSObject 对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Q: assign 其实可以修饰对象，那为什么不用来修饰对象呢？</div><div class="line">被 assign 修饰的对象在释放后，指针的地址还是存在的，也就是说指针并没有被置为 nil，造成野指针。</div><div class="line">Q: 为什么可以用 assign 修饰基本数据类型？</div><div class="line">基本数据类型一般分配在栈上，栈中的内存是有系统自动管理的，不会造成野指针</div><div class="line">weak 修饰的对象在释放后，指针地址会被置为 nil。</div></pre></td></tr></table></figure><h4 id="weak实现原理？"><a href="#weak实现原理？" class="headerlink" title="weak实现原理？"></a>weak实现原理？</h4><h6 id="runtime-维护了一个weak表，本质是哈希表-hash-，key是所指对象的地址，value是weak指针的地址组成的数组"><a href="#runtime-维护了一个weak表，本质是哈希表-hash-，key是所指对象的地址，value是weak指针的地址组成的数组" class="headerlink" title="runtime 维护了一个weak表，本质是哈希表(hash)，key是所指对象的地址，value是weak指针的地址组成的数组"></a>runtime 维护了一个weak表，本质是哈希表(hash)，key是所指对象的地址，value是weak指针的地址组成的数组</h6><hr><h6 id="1-初始化创建时，runtime会调用objc-initWeak函数，创建一个new-weak指针指向对象地址"><a href="#1-初始化创建时，runtime会调用objc-initWeak函数，创建一个new-weak指针指向对象地址" class="headerlink" title="1.初始化创建时，runtime会调用objc_initWeak函数，创建一个new weak指针指向对象地址"></a>1.初始化创建时，runtime会调用objc_initWeak函数，创建一个new weak指针指向对象地址</h6><h6 id="2-添加引用时，objc-initWeak会调用objc-storeWeak，更新指针指向，创建对应的weak弱引用表"><a href="#2-添加引用时，objc-initWeak会调用objc-storeWeak，更新指针指向，创建对应的weak弱引用表" class="headerlink" title="2.添加引用时，objc_initWeak会调用objc_storeWeak，更新指针指向，创建对应的weak弱引用表"></a>2.添加引用时，objc_initWeak会调用objc_storeWeak，更新指针指向，创建对应的weak弱引用表</h6><h6 id="3-释放时，会调用clearDeallocating函数，通过对象地址也是key的值，找到对应的value数组，进行遍历，将其中的要处理的数据设为nil，把这个entry从weak表中删除，清理对象"><a href="#3-释放时，会调用clearDeallocating函数，通过对象地址也是key的值，找到对应的value数组，进行遍历，将其中的要处理的数据设为nil，把这个entry从weak表中删除，清理对象" class="headerlink" title="3.释放时，会调用clearDeallocating函数，通过对象地址也是key的值，找到对应的value数组，进行遍历，将其中的要处理的数据设为nil，把这个entry从weak表中删除，清理对象"></a>3.释放时，会调用clearDeallocating函数，通过对象地址也是key的值，找到对应的value数组，进行遍历，将其中的要处理的数据设为nil，把这个entry从weak表中删除，清理对象</h6>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;atomic    原子性访问，对属性赋值的时候加锁&lt;/li&gt;
&lt;li&gt;noatomic  非原子性访问，对属性赋值的时候不加锁，多线程并发访问会提高性能&lt;/li&gt;
&lt;li&gt;strong    OC对象-强引用，表示实例变量对传入的对象要有所有权关系&lt;/li&gt;
&lt;li&gt;assige    非OC对象(number,bool)，简单赋值，引用计数不会增加
    
    </summary>
    
      <category term="编程" scheme="https:allenYuKin.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="oc" scheme="https:allenYuKin.github.io/tags/oc/"/>
    
  </entry>
  
  <entry>
    <title>自动化神器 fastlane</title>
    <link href="https:allenYuKin.github.io/2017/12/06/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    <id>https:allenYuKin.github.io/2017/12/06/自动化打包工具/</id>
    <published>2017-12-06T04:24:04.000Z</published>
    <updated>2017-12-06T09:04:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Fastlane</strong> 是用Ruby语言编写的一套自动化工具集和框架，每一个工具实际都对应一个Ruby脚本，用来执行某一个特定的任务，而Fastlane核心框架则允许使用者通过类似配置文件的形式，将不同的工具有机而灵活的结合在一起，从而形成一个个完整的自动化流程。<br><a id="more"></a></p><h4 id="先进行fastlane的安装"><a href="#先进行fastlane的安装" class="headerlink" title="先进行fastlane的安装"></a>先进行fastlane的安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install fastlane --verbose</div></pre></td></tr></table></figure><h4 id="确保Xcode安装了最新版本命令行工具"><a href="#确保Xcode安装了最新版本命令行工具" class="headerlink" title="确保Xcode安装了最新版本命令行工具"></a>确保Xcode安装了最新版本命令行工具</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcode-select --install</div></pre></td></tr></table></figure><h4 id="如果fastlane加载缓慢-请尝试运行"><a href="#如果fastlane加载缓慢-请尝试运行" class="headerlink" title="如果fastlane加载缓慢,请尝试运行"></a>如果fastlane加载缓慢,请尝试运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem clean up</div></pre></td></tr></table></figure><h4 id="找到项根目目录"><a href="#找到项根目目录" class="headerlink" title="找到项根目目录"></a>找到项根目目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /Users/jsqb/Desktop/iOS</div></pre></td></tr></table></figure><h4 id="执行fastlane安装"><a href="#执行fastlane安装" class="headerlink" title="执行fastlane安装"></a>执行fastlane安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">执行 fastlane init</div><div class="line">配置开发者账户user，password，bundle identfier</div></pre></td></tr></table></figure><h4 id="会生成fastlane文件"><a href="#会生成fastlane文件" class="headerlink" title="会生成fastlane文件"></a>会生成fastlane文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Appfile  - 包含你的app_id bundle id 如果上步init的时候你输入了正确的appId账号和密码会在这里生成正确的team_id信息</div><div class="line">Fastfile - 是最重要的一个文件，编写和定制我们打包脚本的一个文件</div></pre></td></tr></table></figure><h4 id="fastlane-工具"><a href="#fastlane-工具" class="headerlink" title="fastlane 工具"></a>fastlane 工具</h4><blockquote><p>除fastlane命令,你还可以访问以下fastlane工具</p><ul><li>deliver: 上传截图, 元数据, app应用程序到App Store</li><li>supply: 上传Android app应用程序和元数据到Google Play</li><li>snapshot: 自动捕获iOS app应用程序本地截图</li><li>screengrab: 自动捕获Android app应用程序本地截图</li><li>frameit: 快速截屏并将截屏放入设备中</li><li>pem: 自动生成和更新推送通知配置文件</li><li>sigh: 开发证书和描述文件下载</li><li>produce: 使用命令行在iTunes Connect上创建新的app和开发入口</li><li>cert: 自动创建和配置iOS代码签名证书</li><li>spaceship: Ruby 库访问 Apple开发者中心和 iTunes Connect</li><li>pilot: 最好的方式管理你的TestFlight 测试人员和从终端构建</li><li>boarding: 最简单的方式邀请你的TestFlight beta测试人员</li><li>gym: iOS app打包签名自动化工具</li><li>match: 使用Git同步你的团队证书和配置文件</li><li>scan: 最简单方式测试你的 iOS 和 Mac apps</li></ul></blockquote><h4 id="我们使用gym来做自动化打包"><a href="#我们使用gym来做自动化打包" class="headerlink" title="我们使用gym来做自动化打包"></a>我们使用gym来做自动化打包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">安装 sudo gem install gym</div></pre></td></tr></table></figure><h4 id="确保脚本文件在项目相同路径下"><a href="#确保脚本文件在项目相同路径下" class="headerlink" title="确保脚本文件在项目相同路径下"></a>确保脚本文件在项目相同路径下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd 到项目根目录 创建并编写脚本</div><div class="line">vim build_using_gym.sh</div></pre></td></tr></table></figure><h4 id="vim编辑内容"><a href="#vim编辑内容" class="headerlink" title="vim编辑内容"></a>vim编辑内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">#计时</div><div class="line">SECONDS=0</div><div class="line"></div><div class="line">#脚本放置在与项目相同的路径下</div><div class="line">project_path=$(pwd)</div><div class="line">#取当前时间字符串添加到文件结尾</div><div class="line">now=$(date +&quot;%Y.%m.%d.%H.%M&quot;)</div><div class="line">pgy_user_key=&quot;b9df7d84c0ff1e447cca2be28154f467&quot;</div><div class="line">pgy_api_key=&quot;2ae59ed921d62503276eb16d85085031&quot;</div><div class="line"></div><div class="line">#指定项目的scheme名称</div><div class="line">scheme=&quot;PACK&quot;</div><div class="line">#指定要打包的配置 Debug Release</div><div class="line">configuration=&quot;Debug&quot;</div><div class="line">#指定打包所使用的输出方式，目前支持app-store(苹果商店), ad-hoc(蒲公英等发布平台), enterprise(￥299企业账户), development(￥99公司账户)</div><div class="line">export_method=&apos;development&apos;</div><div class="line"></div><div class="line">#指定项目地址</div><div class="line">workspace_path=&quot;$project_path/PACK.xcworkspace&quot;</div><div class="line">#指定输出路径</div><div class="line">output_path=&quot;project_path/ipa-speedWallet&quot;</div><div class="line">#指定输出归档文件地址</div><div class="line">archive_path=&quot;$output_path/PACK_$&#123;now&#125;.xcarchive&quot;</div><div class="line">#指定输出ipa地址</div><div class="line">ipa_path=&quot;$output_path/PACK_$&#123;now&#125;.ipa&quot;</div><div class="line">#ipa输出全地址</div><div class="line">ipa_newPath=&quot;$project_path/$output_path/极速钱包_$&#123;now&#125;.ipa&quot;</div><div class="line">#指定输出ipa名称</div><div class="line">ipa_name=&quot;极速钱包_$&#123;now&#125;.ipa&quot;</div><div class="line">#获取执行命令时的commit message</div><div class="line">commit_msg=&quot;$1&quot;</div><div class="line"></div><div class="line">#输出设定的变量值</div><div class="line">echo &quot;===workspace path: $&#123;workspace_path&#125;===&quot;</div><div class="line">echo &quot;===archive path: $&#123;archive_path&#125;===&quot;</div><div class="line">echo &quot;===ipa path: $&#123;ipa_newPath&#125;===&quot;</div><div class="line">echo &quot;===export method: $&#123;export_method&#125;===&quot;</div><div class="line">echo &quot;===commit msg: $1===&quot;</div><div class="line"></div><div class="line">#先清空前一次build</div><div class="line">gym --workspace $&#123;workspace_path&#125; --scheme $&#123;scheme&#125; --clean --configuration $&#123;configuration&#125; --archive_path $&#123;archive_path&#125; --export_method $&#123;export_method&#125; --output_directory $&#123;output_path&#125; --output_name $&#123;ipa_name&#125;</div><div class="line"></div><div class="line">#上传到fir</div><div class="line">fir publish $&#123;ipa_path&#125; -T fir_token -c &quot;$&#123;commit_msg&#125;&quot;</div><div class="line">echo &quot;ipa is Finished.Total time: $&#123;SECONDS&#125;s===，正上传蒲公英平台&quot;</div><div class="line">curl -F &quot;file=@$&#123;ipa_newPath&#125;&quot; -F &quot;uKey=$&#123;pgy_user_key&#125;&quot; -F &quot;_api_key=$&#123;pgy_api_key&#125;&quot; http://www.pgyer.com/apiv1/app/upload</div><div class="line">#输出总用时</div><div class="line">echo &quot;===打包+上传蒲同英成功. 总耗费时: $&#123;SECONDS&#125;s===&quot;</div></pre></td></tr></table></figure><h4 id="增加脚本执行权限"><a href="#增加脚本执行权限" class="headerlink" title="增加脚本执行权限"></a>增加脚本执行权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x build_using_gym.sh</div></pre></td></tr></table></figure><h4 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./build_using_gym.sh</div></pre></td></tr></table></figure><h4 id="通过fastlane-蒲公英就可以来实现自动化打包发布功能"><a href="#通过fastlane-蒲公英就可以来实现自动化打包发布功能" class="headerlink" title="通过fastlane+蒲公英就可以来实现自动化打包发布功能"></a>通过fastlane+蒲公英就可以来实现自动化打包发布功能</h4><p><img src="http://oji6h5o73.bkt.clouddn.com/WechatIMG692.jpeg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Fastlane&lt;/strong&gt; 是用Ruby语言编写的一套自动化工具集和框架，每一个工具实际都对应一个Ruby脚本，用来执行某一个特定的任务，而Fastlane核心框架则允许使用者通过类似配置文件的形式，将不同的工具有机而灵活的结合在一起，从而形成一个个完整的自动化流程。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https:allenYuKin.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="oc" scheme="https:allenYuKin.github.io/tags/oc/"/>
    
  </entry>
  
  <entry>
    <title>基于AFN的网络库封装</title>
    <link href="https:allenYuKin.github.io/2017/12/03/%E5%9F%BA%E4%BA%8EAFN%E7%BD%91%E7%BB%9C%E5%BA%93/"/>
    <id>https:allenYuKin.github.io/2017/12/03/基于AFN网络库/</id>
    <published>2017-12-03T01:33:04.000Z</published>
    <updated>2017-12-06T09:07:01.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h4 id="第一层-HMRequest-功能"><a href="#第一层-HMRequest-功能" class="headerlink" title="第一层 HMRequest 功能"></a><strong>第一层 HMRequest 功能</strong></h4><ul><li>HTTP  常用请求方式 GET POST PUT PATCH DELETE</li><li>POST  上传JSON数据</li><li>PHOTO 单张多张照片上传</li></ul><hr><a id="more"></a><h5 id="HMRequest-h"><a href="#HMRequest-h" class="headerlink" title="HMRequest.h"></a>HMRequest.h</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface HMRequestModel : HMBaseModel</div><div class="line">@property (nonatomic, strong) NSNumber *code;</div><div class="line">@property (nonatomic, copy) NSString   *message;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">typedef void(^HMRequestSuccessBlock)(id result, HMRequestModel *model);</div><div class="line">typedef void(^HMRequestFailureBlock)(NSString *msg);</div><div class="line"></div><div class="line">typedef NS_ENUM(NSInteger, HMRequestMethod) &#123;</div><div class="line">HTTP_REQUEST_TYPE_GET    = 0,</div><div class="line">HTTP_REQUEST_TYPE_POST   = 1,</div><div class="line">HTTP_REQUEST_TYPE_PUT    = 2,</div><div class="line">HTTP_REQUEST_TYPE_PATCH  = 3,</div><div class="line">HTTP_REQUEST_TYPE_DELETE = 4,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">typedef NS_ENUM(NSInteger, HMRequestStatus) &#123;</div><div class="line">HTTP_REQUEST_STATUS_FAILURE = -1,</div><div class="line">HTTP_REQUEST_STATUS_SUCCESS = 0</div><div class="line">&#125;;</div><div class="line"></div><div class="line">@interface HMRequest : NSObject</div><div class="line"></div><div class="line">#pragma mark- http request</div><div class="line">+ (void)hm_requestActionWithUrl:(NSString *)url</div><div class="line">params:(NSDictionary *)params</div><div class="line">method:(HMRequestMethod)method</div><div class="line">success:(HMRequestSuccessBlock)success</div><div class="line">failure:(HMRequestFailureBlock)failure;</div><div class="line"></div><div class="line">#pragma mark- json request</div><div class="line">+ (void)hm_postJsonDataWithUrl:(NSString *)url</div><div class="line">params:(NSDictionary *)params</div><div class="line">success:(HMRequestSuccessBlock)success</div><div class="line">failure:(HMRequestFailureBlock)failure;</div><div class="line"></div><div class="line">#pragma mark- photo request</div><div class="line">+ (void)hm_upLoadPhotoWithUrl:(NSString *)url</div><div class="line">params:(NSDictionary *)params</div><div class="line">photoSize:(CGSize)photoSize</div><div class="line">photos:(NSArray *)photos</div><div class="line">success:(HMRequestSuccessBlock)success</div><div class="line">failure:(HMRequestFailureBlock)failure;</div><div class="line">@end</div></pre></td></tr></table></figure><h5 id="HMRequest-m"><a href="#HMRequest-m" class="headerlink" title="HMRequest.m"></a>HMRequest.m</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div></pre></td><td class="code"><pre><div class="line">#import &quot;HMRequest.h&quot;</div><div class="line"></div><div class="line">@implementation HMRequestModel</div><div class="line"></div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation HMRequest</div><div class="line"></div><div class="line">+ (void)hm_requestActionWithUrl:(NSString *)url</div><div class="line">params:(NSDictionary *)params</div><div class="line">method:(HMRequestMethod)method</div><div class="line">success:(HMRequestSuccessBlock)success</div><div class="line">failure:(HMRequestFailureBlock)failure</div><div class="line">&#123;</div><div class="line">// [HMServerConfig HMServerAddress] 为正式/测试环境前缀可自行处理</div><div class="line">NSString *requestUrl = HM_FORMAT_TWO(@&quot;%@%@&quot;, [HMServerConfig HMServerAddress], url);</div><div class="line">requestUrl = [requestUrl stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLQueryAllowedCharacterSet]];</div><div class="line"></div><div class="line">if (method == HTTP_REQUEST_TYPE_GET) &#123;</div><div class="line">[[HMRequest manager] GET:requestUrl</div><div class="line">parameters:params</div><div class="line">progress:nil</div><div class="line">success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</div><div class="line">HMRequestModel *model = [HMRequestModel yy_modelWithDictionary:responseObject];</div><div class="line">if ([model.code integerValue] == HTTP_REQUEST_STATUS_SUCCESS) success(responseObject, model);</div><div class="line">if ([model.code integerValue] == HTTP_REQUEST_STATUS_FAILURE) success(nil, model);</div><div class="line">&#125;</div><div class="line">failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line">failure([HMRequest errorInfo:error]);</div><div class="line">&#125;];</div><div class="line">&#125;</div><div class="line">if (method == HTTP_REQUEST_TYPE_POST) &#123;</div><div class="line">[[HMRequest manager] POST:requestUrl</div><div class="line">parameters:params progress:nil</div><div class="line">success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</div><div class="line">HMRequestModel *model = [HMRequestModel yy_modelWithDictionary:responseObject];</div><div class="line">if ([model.code integerValue] == HTTP_REQUEST_STATUS_SUCCESS) success(responseObject, model);</div><div class="line">if ([model.code integerValue] == HTTP_REQUEST_STATUS_FAILURE) success(nil, model);</div><div class="line">&#125;</div><div class="line">failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line">failure([HMRequest errorInfo:error]);</div><div class="line">&#125;];</div><div class="line">&#125;</div><div class="line">if (method == HTTP_REQUEST_TYPE_PUT) &#123;</div><div class="line">[[HMRequest manager] PUT:requestUrl</div><div class="line">parameters:params</div><div class="line">success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</div><div class="line">HMRequestModel *model = [HMRequestModel yy_modelWithDictionary:responseObject];</div><div class="line">if ([model.code integerValue] == HTTP_REQUEST_STATUS_SUCCESS) success(responseObject, model);</div><div class="line">if ([model.code integerValue] == HTTP_REQUEST_STATUS_FAILURE) success(nil, model);</div><div class="line">&#125;</div><div class="line">failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line">failure([HMRequest errorInfo:error]);</div><div class="line">&#125;];</div><div class="line">&#125;</div><div class="line">if (method == HTTP_REQUEST_TYPE_PATCH) &#123;</div><div class="line">[[HMRequest manager] PATCH:requestUrl</div><div class="line">parameters:params</div><div class="line">success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</div><div class="line">HMRequestModel *model = [HMRequestModel yy_modelWithDictionary:responseObject];</div><div class="line">if ([model.code integerValue] == HTTP_REQUEST_STATUS_SUCCESS) success(responseObject, model);</div><div class="line">if ([model.code integerValue] == HTTP_REQUEST_STATUS_FAILURE) success(nil, model);</div><div class="line">&#125;</div><div class="line">failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line">failure([HMRequest errorInfo:error]);</div><div class="line">&#125;];</div><div class="line">&#125;</div><div class="line">if (method == HTTP_REQUEST_TYPE_DELETE) &#123;</div><div class="line">[[HMRequest manager] DELETE:requestUrl</div><div class="line">parameters:params</div><div class="line">success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</div><div class="line">HMRequestModel *model = [HMRequestModel yy_modelWithDictionary:responseObject];</div><div class="line">if ([model.code integerValue] == HTTP_REQUEST_STATUS_SUCCESS) success(responseObject, model);</div><div class="line">if ([model.code integerValue] == HTTP_REQUEST_STATUS_FAILURE) success(nil, model);</div><div class="line">&#125;</div><div class="line">failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line">failure([HMRequest errorInfo:error]);</div><div class="line">&#125;];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (void)hm_postJsonDataWithUrl:(NSString *)url</div><div class="line">params:(NSDictionary *)params</div><div class="line">success:(HMRequestSuccessBlock)success</div><div class="line">failure:(HMRequestFailureBlock)failure</div><div class="line">&#123;</div><div class="line">NSString *requestUrl = HM_FORMAT_TWO(@&quot;%@%@&quot;, [HMServerConfig HMServerAddress], url);</div><div class="line">requestUrl = [requestUrl stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLQueryAllowedCharacterSet]];</div><div class="line">NSError *error;</div><div class="line">NSData *jsonData     = [NSJSONSerialization dataWithJSONObject:params options:0 error:&amp;error];</div><div class="line">NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];</div><div class="line">AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration]];</div><div class="line">NSMutableURLRequest *request = [[AFJSONRequestSerializer serializer] requestWithMethod:@&quot;POST&quot; URLString:requestUrl parameters:nil error:nil];</div><div class="line">[request setValue:@&quot;application/json&quot; forHTTPHeaderField:@&quot;Content-Type&quot;];</div><div class="line">[request setValue:@&quot;application/json&quot; forHTTPHeaderField:@&quot;Accept&quot;];</div><div class="line">[request setHTTPBody:[jsonString dataUsingEncoding:NSUTF8StringEncoding]];</div><div class="line">[[manager dataTaskWithRequest:request completionHandler:^(NSURLResponse * _Nonnull response, id  _Nullable responseObject, NSError * _Nullable error) &#123;</div><div class="line">if (responseObject) &#123;</div><div class="line">HMRequestModel *model = [HMRequestModel yy_modelWithDictionary:responseObject];</div><div class="line">if ([model.code integerValue] == HTTP_REQUEST_STATUS_SUCCESS) success(responseObject, model);</div><div class="line">if ([model.code integerValue] == HTTP_REQUEST_STATUS_FAILURE) success(nil, model);</div><div class="line">&#125; else &#123;</div><div class="line">failure([HMRequest errorInfo:error]);</div><div class="line">&#125;</div><div class="line">&#125;] resume];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (void)hm_upLoadPhotoWithUrl:(NSString *)url</div><div class="line">params:(NSDictionary *)params</div><div class="line">photoSize:(CGSize)photoSize</div><div class="line">photos:(NSArray *)photos</div><div class="line">success:(HMRequestSuccessBlock)success</div><div class="line">failure:(HMRequestFailureBlock)failure</div><div class="line">&#123;</div><div class="line">NSString *requestUrl = HM_FORMAT_TWO(@&quot;%@%@&quot;, [HMServerConfig HMServerAddress], url);</div><div class="line">requestUrl = [requestUrl stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLQueryAllowedCharacterSet]];</div><div class="line">NSLog(@&quot;url:%@\nparams:%@&quot;, requestUrl, params);</div><div class="line">AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line">manager.requestSerializer     = [AFHTTPRequestSerializer serializer];</div><div class="line">manager.responseSerializer    = [AFJSONResponseSerializer serializer];</div><div class="line">[SVProgressHUD show];</div><div class="line">[manager POST:requestUrl parameters:params constructingBodyWithBlock:^(id&lt;AFMultipartFormData&gt;  _Nonnull formData) &#123;</div><div class="line">for (int i = 0; i &lt; photos.count; i++) &#123;</div><div class="line">NSData *imageData = UIImageJPEGRepresentation(photos[i], 0.6f);</div><div class="line">NSLog(@&quot;upload image size: %ld k&quot;, (long)(imageData.length / 1024));</div><div class="line">NSDateFormatter *formatter = [NSDateFormatter new];</div><div class="line">formatter.dateFormat       = @&quot;yyyyMMddHHmmss&quot;;</div><div class="line">NSString *imageName        = [formatter stringFromDate:[NSDate date]];</div><div class="line">NSString *fileName         = [NSString stringWithFormat:@&quot;%@.jpg&quot;,imageName];</div><div class="line">[formData appendPartWithFileData:imageData name:@&quot;image&quot; fileName:fileName mimeType:@&quot;image/jpeg&quot;];</div><div class="line">&#125;</div><div class="line">&#125; progress:^(NSProgress * _Nonnull uploadProgress) &#123;</div><div class="line">&#125; success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</div><div class="line">HMRequestModel *model = [HMRequestModel yy_modelWithDictionary:responseObject];</div><div class="line">if ([model.code integerValue] == HTTP_REQUEST_STATUS_SUCCESS) success(responseObject, model);</div><div class="line">if ([model.code integerValue] == HTTP_REQUEST_STATUS_FAILURE) success(nil, model);</div><div class="line">NSLog(@&quot;responseObject:%@&quot;, responseObject);</div><div class="line">[SVProgressHUD dismiss];</div><div class="line"></div><div class="line">&#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line">failure([HMRequest errorInfo:error]);</div><div class="line">&#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (NSString *)errorInfo:(NSError *)error</div><div class="line">&#123;</div><div class="line">return error.userInfo[@&quot;message&quot;] ? error.userInfo[@&quot;message&quot;] : @&quot;网络断开连接，请稍后再试&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (AFHTTPSessionManager *)manager</div><div class="line">&#123;</div><div class="line">AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line">[manager.responseSerializer setAcceptableContentTypes:[NSSet setWithObjects:@&quot;text/html&quot;,</div><div class="line">@&quot;text/css&quot;,</div><div class="line">@&quot;text/json&quot;,</div><div class="line">@&quot;text/javascript&quot;,</div><div class="line">@&quot;text/plain&quot;,</div><div class="line">@&quot;application/json&quot;,</div><div class="line">@&quot;application/x-javascript&quot;,</div><div class="line">@&quot;application/javascript&quot;,</div><div class="line">@&quot;application/vnd.api+json&quot;, nil]];</div><div class="line">return manager;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><hr><h4 id="第二层-HMService-功能"><a href="#第二层-HMService-功能" class="headerlink" title="第二层 HMService 功能"></a><strong>第二层 HMService 功能</strong></h4><h2 id="按模块进行category类别划分（例如HMNetService、HMNetService-mine）"><a href="#按模块进行category类别划分（例如HMNetService、HMNetService-mine）" class="headerlink" title="- 按模块进行category类别划分（例如HMNetService、HMNetService+mine）"></a>- 按模块进行category类别划分（例如HMNetService、HMNetService+mine）</h2><h5 id="HMService-h"><a href="#HMService-h" class="headerlink" title="HMService.h"></a>HMService.h</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#import &quot;HMNetService.h&quot;</div><div class="line"></div><div class="line">@interface HMNetService (mine)</div><div class="line"></div><div class="line">// 个人信息 -&gt; 上传照片</div><div class="line">+ (void)upLoadWithPhotos:(NSArray *)photos</div><div class="line">type:(NSNumber *)type</div><div class="line">complete:(MultiActionBlock)complete;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure><h5 id="HMService-m"><a href="#HMService-m" class="headerlink" title="HMService.m"></a>HMService.m</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#import &quot;HMNetService+mine.h&quot;</div><div class="line"></div><div class="line">static NSString * const upLoadImageUrl = @&quot;/upload/image&quot;;</div><div class="line"></div><div class="line">@implementation HMNetService (mine)</div><div class="line"></div><div class="line">+ (void)upLoadWithPhotos:(NSArray *)photos</div><div class="line">type:(NSNumber *)type</div><div class="line">complete:(MultiActionBlock)complete</div><div class="line">&#123;</div><div class="line">HMParams *params = [HMParams new];</div><div class="line">[params addParam:@&quot;type&quot; value:type];</div><div class="line">[HMRequest hm_upLoadPhotoWithUrl:upLoadImageUrl</div><div class="line">params:params.params</div><div class="line">photoSize:CGSizeMake(50, 50)</div><div class="line">photos:photos</div><div class="line">success:^(id result, HMRequestModel *model) &#123;</div><div class="line">complete(result, model, model.message);</div><div class="line">&#125; failure:^(NSString *msg) &#123;</div><div class="line">complete(nil, nil, msg);</div><div class="line">&#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h4 id="第三层-外部调用实现功能"><a href="#第三层-外部调用实现功能" class="headerlink" title="第三层 外部调用实现功能"></a><strong>第三层 外部调用实现功能</strong></h4><h2 id="block回调，非常简洁只关注最后结果做处理"><a href="#block回调，非常简洁只关注最后结果做处理" class="headerlink" title="- block回调，非常简洁只关注最后结果做处理"></a>- block回调，非常简洁只关注最后结果做处理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[HMNetService upLoadWithPhotos:@[photo]</div><div class="line">type:@(type)</div><div class="line">complete:^(NSDictionary *result, HMRequestModel *requestModel, NSString *message) &#123;</div><div class="line">if (result) &#123;</div><div class="line">// 成功处理</div><div class="line">&#125; else &#123;</div><div class="line">// 失败处理</div><div class="line">&#125;</div><div class="line">[[iToast makeText:message] show];</div><div class="line">&#125;];</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h4 id=&quot;第一层-HMRequest-功能&quot;&gt;&lt;a href=&quot;#第一层-HMRequest-功能&quot; class=&quot;headerlink&quot; title=&quot;第一层 HMRequest 功能&quot;&gt;&lt;/a&gt;&lt;strong&gt;第一层 HMRequest 功能&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;HTTP  常用请求方式 GET POST PUT PATCH DELETE&lt;/li&gt;
&lt;li&gt;POST  上传JSON数据&lt;/li&gt;
&lt;li&gt;PHOTO 单张多张照片上传&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="编程" scheme="https:allenYuKin.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="oc" scheme="https:allenYuKin.github.io/tags/oc/"/>
    
  </entry>
  
</feed>
